[]
module INJ
  sort String{} []
  sort KInt{} []
  symbol inj{Sin,Sout}(Sin):Sout []
  symbol info{S}(String{}, S) : S []
  symbol input{}(KInt{}, KInt{}, KInt{}, KInt{}) : String{} []
endmodule []

module INPUT
  import INJ []
  sort Exp{} []
  sort Int{} []

  /* input(Int): 1 */
  axiom{} 
\dv{Int{}}("1") []
  /* input(Exp): -1 */
  axiom{} 
inj{Int{},Exp{}}(\dv{Int{}}("-1")) []
  /* input(Exp): +1 */
  axiom{} 
inj{Int{},Exp{}}(\dv{Int{}}("+1")) []
  /* input(Exp): 1+2 */
  axiom{} 
\exists{Exp{}}(V0:Exp{},
    \and{Exp{}}(
        \equals{Exp{},Exp{}}(V0:Exp{},inj{Int{},Exp{}}(\dv{Int{}}("1"))),
\or{Exp{}}(plus{}(V0:Exp{},inj{Int{},Exp{}}(\dv{Int{}}("2"))),\or{Exp{}}(app{}(V0:Exp{},inj{Int{},Exp{}}(\dv{Int{}}("+2"))),\bottom{Exp{}}())))) []
  /* input(Exp): 1++2 */
  axiom{} 
plus{}(inj{Int{},Exp{}}(\dv{Int{}}("1")),inj{Int{},Exp{}}(\dv{Int{}}("+2"))) []
  symbol app{}(Exp{}, Exp{}):Exp{} []
  symbol plus{}(Exp{}, Exp{}):Exp{} []
  /* input(Exp): 1 */
  axiom{} 
inj{Int{},Exp{}}(\dv{Int{}}("1")) []
endmodule []
